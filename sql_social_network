Schema::
Highschooler ( ID, name, grade ) 
English: There is a high school student with unique ID and a given first name in a certain grade. 

Friend ( ID1, ID2 ) 
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123). 

Likes ( ID1, ID2 ) 
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present. 

//Find the names of all students who are friends with someone named Gabriel. 
select name
from highschooler h join friend f on h.id = f.id2
  where f.id1 in (select id from highschooler where name = 'Gabriel');

//For every student who likes someone 2 or more grades younger than themselves, 
//return that student's name and grade, and the name and grade of the student they like.
select h.name, h.grade, l.name, l.grade
from highschooler h
  join ( select * from highschooler h join likes l on h.id = l.id2) l on h.id = l.id1
  where h.grade >= l.grade + 2;    

//For every pair of students who both like each other, return the name and grade of 
//both students. Include each pair only once, with the two names in alphabetical order. 
select h1.name, h1.grade, h2.name, h2.grade
from  (select id1, id2 from likes
    where id1 in (select id2 from likes)
    and id2 in (select id1 from likes)) l
    join
    highschooler h1 join highschooler h2
    on h1.id = l.id1 and h2.id = l.id2 and h1.name < h2.name;
    
//Find all students who do not appear in the Likes table (as a student who likes or is liked) 
//and return their names and grades. Sort by grade, then by name within each grade.   
select name, grade from highschooler
where id not in
  (select id1 from likes
  union
  select id2 from likes)
order by grade, name;

//For every situation where student A likes student B, but we have no information about whom B likes 
//(that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 
select h1.name, h1.grade, h2.name, h2.grade
from (select id1, id2 from likes
        where id2 not in (select id1 from likes)) l
        join
       highschooler h1 join highschooler h2
       on h1.id = l.id1 and h2.id = l.id2;
       
//Find names and grades of students who only have friends 
//in the same grade. Return the result sorted by grade, then by name within each grade. 
select name, grade from highschooler
where id not in (select h1.id from highschooler h1 join highschooler h2 join friend f
                  on h1.id = f.id1 and h2.id = f.id2
                  where h1.grade <> h2.grade)
order by grade, name;

//For each student A who likes a student B where the two are not friends, find if they have a friend C 
//in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. 
select h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade
from highschooler h1 join highschooler h2 join highschooler h3
join friend f1 join friend f2 join likes
  on h1.id = likes.id1 and h2.id = likes.id2 
  and h2.id not in (select id2 from friend where id1 = h1.id)
  and h1.id = f1.id1 and h3.id = f1.id2
  and h2.id = f2.id1 and h3.id = f2.id2;
  
//Find the difference between the number of students in the school and the number of different first names. 
select c_id - c_name
from (select count(id) from highschool),
(select count(distinct name) from highschool);

//Find the name and grade of all students who are liked by more than one other student.
select name, grade from highschooler
where id in (select id2 from likes
             group by id2
             having count(id1) > 1);
